# Example values files for a customer onboarding
# It is a huge file and can help you creating:
#   - one or more namespaces including labels etc.
#   - local project admin group (in case groups are not created by other mechnics like LDAP Group Sync)
#   - GitOps (ArgoCD) Project, that limits allowed repos, clusters, permissions etc.
#   - Resource Quotas
#   - Limit Ranges
#   - Creation of default Network Policies (same namespace, OpenShift Monitoring & API Server, OpenShift Ingress, Egress Deny All)
#   - Creation of custom Network Policies
#
# This values file shows all possible settings. Most probably, you do not need to use everything.
# I tried to make is as configuratble as possible and most settings are working with defaults values and all can be disabled by setting "enabled" to false
#
# Most variables are handed over to the Sub-Chart: helper-proj-onboarding https://github.com/tjungbauer/helm-charts/tree/main/charts/helper-proj-onboarding

# Name of the custoemr or project. This must be the path.basename.
customer.name: my-main-app

# Normalized name of the customer or project. This must be LOWER case, otherwise Argo CD will fail
# This will be part the name the Argo CD ApplicationSet will use to create the Application.
customer.normalized: my-main-app # name for ArgoCD must be in lower case

# Group that is allowed in RBAC. This group can either be created using this Helm Chart (will be named as <namespace>-admin) or must be known (for example synced via LDAP Group Sync)
oidc_groups: &oidc-group my-main-app-project-1-admins

# Environment to which these values are valid, this should be the cluster name as defined in the values-global.yaml
# In best case the same is equal to the folder we are currntly in, but this is optional.
environment: &environment prod-cluster

# Parameters handed over to Sub-Chart helper-proj-onboarding
helper-proj-onboarding:

  environment: *environment

  # List of namespaces this customer shall manage.
  # A customer or project may consist of multiple namespace
  namespaces:

    # Name of the first Namespace
    - name: &name my-main-app-project-1

      # Is this Namespace enabled or not
      enabled: true

      # Network Policies ... these are a bit more complex, when you want to keep them fully configurable.
      # Maybe the following is too much to manage, anyway, let's start

      # 5 default network policies will be created everytime, unless you overwrite them here
      # You can remove this whole block to have the policies created or you can select specific policies
      # which shall be disabled.
      # The 5 policies are:
      #    - Allow Ingress traffic from the OpenShift Router
      #    - Allow OpenShift Monitoring to access and fetch metrics
      #    - Allow inner namespace communication (pod to pod of the same Namespace)
      #    - Allow Kube API Server
      #    - Forbid ANY Egress traffic

      # For example: I would like to disable "deny all egress" (which means the Pods can reach any external destination).
      default_policies:
        disable_allow_from_ingress: true
        disable_allow_from_monitoring: true
        disable_allow_from_same_namespace: true
        disable_allow_kube_apiserver: true
        disable_deny_all_egress: true # This default policy will not be created, while the others will be.

      # Creation of Argo CD Project
      argocd_rbac_setup:
        # This is required to build the rbac rules correctly. Theoretically, you can create multiple RBAC rules, but usually you create one per project/customer
        argocd_project_1:
          enabled: true
          # Name of the AppProject is set to the customers Namespace. Which means, each Namespace will get it's own AppProject
          name: *name
          sourceRepos:
            - 'https://github.com/tjungbauer/book-import/'
          rbac:
              # Name of the RBAC rule
            - name: write
              # Description of the RBAC rule
              description: "Group to deploy on DEV environment"
              # List of OCP groups that is allowed to manage objects in this project
              oidc_groups:
                - *oidc-group
              # Project policies
              # This will limit a project to specific actions
              # Parameters:
              #   - action: Mandatory, either get, create, update, delete, sync or override
              #   - permissions: allow or deny (Default: deny)
              #   - resource: i.e applications (Default: applications)
              #   - object: Which kind of objects can be managed, default "*" (all) inside the namespace
              policies:
                - action: get # get, create, update, delete, sync, override
                  permission: allow # allow or deny
                  object: '*' # which kind of objects can be managed, default "*" (all) inside the namespace
                - action: create
                  permission: allow
                - action: update
                  permission: allow
                - action: delete
                  permission: allow
                - action: sync
                  permission: allow
                - action: override
                  permission: allow
          # Sync Windows - when application can be synced or not. Typically used to prevent automatic synchronization during specific time frames
          # but can be used to limit the allowed syncs as well.
          syncWindows:
            - applications:
                - '*'
              clusters:
                - *environment # the cluster we care currently configuring
              namespaces:
                - *name # the namespace of this application
              timezone: 'Europe/Amsterdam' # timezone, default Europe/Amsterdam
              duration: 1h # duration, for example "30m" or "1h" (default 1h)
              kind: allow # allow or deny (default allow)
              manualSync: true # is manual sync allowed ot not (default true)
              schedule: '* * * * *' # cronjob like schedule: Min, Hour, Day, Month, Weekday (default '55 0 1 12 *' )